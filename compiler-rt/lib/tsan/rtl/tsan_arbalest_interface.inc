#include "tsan_interface.h"
#include "tsan_rtl.h"
#include "tsan_shadow.h"

#define CALLERPC ((uptr)__builtin_return_address(0))

using namespace __tsan;

void __arbalest_init(u32 global_num, void **global_ptr,
                     u64 *global_size, char **global_name) {
  arbalest_enabled = true;
  // VPrintf("arbalest init global num = %u\n", global_num);
  for (u32 i = 0; i < global_num; i++) {
    // VPrintf("  global[%u] %s, ptr = %p, size = %llu\n", i, global_name[i],
    //       global_ptr[i], global_size[i]);
    uptr global_start = reinterpret_cast<uptr>(global_ptr[i]);
    ctx->globals.insert(Interval{global_start, global_start + global_size[i]}, 
                        MapInfo{global_start, global_size[i], global_name[i]});
    VsmRangeSet(global_start, global_size[i], VariableStateMachine::kHostMask);
  }
}

void __arbalest_read1(void *addr) {
  CheckVsm(cur_thread(), CALLERPC, (uptr)addr, 1);
}

void __arbalest_read2(void *addr) {
  CheckVsm(cur_thread(), CALLERPC, (uptr)addr, 2);
}

void __arbalest_read4(void *addr) {
  CheckVsm(cur_thread(), CALLERPC, (uptr)addr, 4);
}

void __arbalest_read8(void *addr) {
  CheckVsm(cur_thread(), CALLERPC, (uptr)addr, 8);
}

void __arbalest_read16(void *addr) {
  CheckVsm16(cur_thread(), CALLERPC, (uptr)addr);
}

void __arbalest_write1(void *addr) {
  UpdateVsm(cur_thread(), (uptr)addr, 1);
}

void __arbalest_write2(void *addr) {
  UpdateVsm(cur_thread(), (uptr)addr, 2);
}

void __arbalest_write4(void *addr){
  UpdateVsm(cur_thread(), (uptr)addr, 4);
}

void __arbalest_write8(void *addr) {
  UpdateVsm(cur_thread(), (uptr)addr, 8);
}

void __arbalest_write16(void *addr) {
  UpdateVsm16(cur_thread(), (uptr)addr);
}

void __arbalest_unaligned_read2(const void *addr) {
  UnalignedCheckVsm(cur_thread(), CALLERPC, (uptr)addr, 2);
}

void __arbalest_unaligned_read4(const void *addr) {
  UnalignedCheckVsm(cur_thread(), CALLERPC, (uptr)addr, 4);
}

void __arbalest_unaligned_read8(const void *addr) {
  UnalignedCheckVsm(cur_thread(), CALLERPC, (uptr)addr, 8);
}

void __arbalest_unaligned_read16(const void *addr) {
  UnalignedCheckVsm16(cur_thread(), CALLERPC, (uptr)addr);
}

void __arbalest_unaligned_write2(void *addr) {
  UnalignedUpdateVsm(cur_thread(), (uptr)addr, 2);
}

void __arbalest_unaligned_write4(void *addr) {
  UnalignedUpdateVsm(cur_thread(), (uptr)addr, 4);
}

void __arbalest_unaligned_write8(void *addr) {
  UnalignedUpdateVsm(cur_thread(), (uptr)addr, 8);
}

void __arbalest_unaligned_write16(void *addr) {
  UnalignedUpdateVsm16(cur_thread(), (uptr)addr);
}

void __arbalest_check_bound(void *base, void *start, unsigned size) {
  CheckBound(cur_thread(), CALLERPC, (uptr)base, (uptr)start, size);
}